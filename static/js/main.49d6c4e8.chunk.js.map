{"version":3,"sources":["assets/React-icon.svg","assets/search.svg","components/Header.js","components/SearchForm.js","components/Error.js","components/Content.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","Logo","alt","href","SearchForm","apiCall","onSubmit","name","type","placeholder","Search","Error","error","Content","location","weather","date","city","country","temp","pressure","humidity","sky","icon","wind","timeShift","urlIcon","utc","Date","getTime","getTimezoneOffset","dateNow","parse","locationTime","toDateString","toLocaleTimeString","mainContent","Main","useState","setLocation","setWeather","setDate","setError","e","a","preventDefault","target","elements","value","url","request","axios","get","catch","response","data","sys","main","description","speed","windDirection","deg","timezone","console","log","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.49d6c4e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/React-icon.05a3e30f.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.c087e16a.svg\";","import React from 'react'\r\nimport Logo from './../assets/React-icon.svg'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"main-logo\">\r\n                <img className=\"main-logo-img\" src={Logo} alt=\"main-logo-img\" />\r\n                <h1 className=\"title\">React Weather App</h1>\r\n            </div>\r\n            <a href='https://github.com/Ivan-Lebedev' className=\"gh\">GitHub</a>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport Search from './../assets/search.svg'\r\n\r\nconst SearchForm = ({ apiCall }) => {\r\n    return (\r\n        <form onSubmit={apiCall} className=\"main-form\">\r\n            <input name=\"location\" className=\"main-form-input\" type=\"text\" placeholder='Enter city name' />\r\n            <button className=\"main-form-input-btn\">\r\n                <img className=\"main-button\" src={Search} alt=\"main-button\" />\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SearchForm","import React from 'react'\r\n\r\nconst Error = ({ error }) => {\r\n    return (\r\n        <section className=\"main-content\">\r\n            <p className=\"no-data-input\">{error}</p>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Error","import React from 'react'\r\nimport Error from './Error'\r\n\r\nconst Content = ({ location, weather, date, error }) => {\r\n    const { city, country } = location\r\n    const { temp, pressure, humidity, sky, icon, wind } = weather\r\n    const { timeShift } = date\r\n    const urlIcon = `https://openweathermap.org/img/wn/${icon}@2x.png`\r\n\r\n    //UTC-time\r\n    const utc = new Date(new Date().getTime() + new Date().getTimezoneOffset() * 60000)    \r\n    //Location-time\r\n    const dateNow = new Date(Date.parse(utc) + timeShift * 1000)\r\n    const locationTime = `${dateNow.toDateString()} - ${dateNow.toLocaleTimeString()}`    \r\n\r\n    const mainContent = location\r\n        ? <section className=\"main-content\">\r\n            <h2 className=\"city-name\">{city}, {country}</h2>\r\n            <p className=\"date-now\">{locationTime}, {sky}</p>\r\n            <div className=\"weather-data\">\r\n                <div className=\"weather-data-main-data\">\r\n                    <div className=\"icon\"><img src={urlIcon} alt=\"icon\" /></div>\r\n                    <div className=\"temperature\">{temp}Â°C</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"addition-data\">\r\n                <div className=\"addition-data-item\">\r\n                    <div className=\"addition-data-item-desc\">Wind:</div>\r\n                    <div className=\"addition-data-item-value\">{wind}m/s</div>\r\n                </div>\r\n                <div className=\"addition-data-item\">\r\n                    <div className=\"addition-data-item-desc\">Pressure:</div>\r\n                    <div className=\"addition-data-item-value\">{pressure}hPa</div>\r\n                </div>\r\n                <div className=\"addition-data-item\">\r\n                    <div className=\"addition-data-item-desc\">Humidity:</div>\r\n                    <div className=\"addition-data-item-value\">{humidity}%</div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n        : <section className=\"main-content\">\r\n            <p className=\"no-data-input\">Enter the name of the city to get started!</p>\r\n        </section>\r\n    return (\r\n        error\r\n            ? <Error error={error} />\r\n            : mainContent\r\n    )\r\n}\r\n\r\nexport default Content","import React, { useState } from 'react'\r\nimport './Main.css'\r\nimport Header from './Header'\r\nimport SearchForm from './SearchForm'\r\nimport Content from './Content'\r\nimport axios from 'axios'\r\n\r\n\r\n\r\nconst Main = () => {\r\n    const [location, setLocation] = useState('')\r\n    const [weather, setWeather] = useState('')\r\n    const [date, setDate] = useState('')\r\n    const [error, setError] = useState('')\r\n\r\n    const apiCall = async e => {\r\n        e.preventDefault()\r\n\r\n        const location = e.target.elements.location.value\r\n\r\n        if (!location) return setError('Please enter the name of the city')\r\n\r\n        const API_KEY = 'a5163f5e55376d613d9d607518cb87fa'\r\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${API_KEY}&units=metric`\r\n        const request = axios.get(url)\r\n        const response = await request\r\n            .catch(() => {\r\n                return setError('Location not found')\r\n            })\r\n        if (!response) return\r\n\r\n        setLocation({\r\n            city: response.data.name,\r\n            country: response.data.sys.country\r\n        })\r\n        setWeather({\r\n            temp: response.data.main.temp,\r\n            pressure: response.data.main.pressure,\r\n            humidity: response.data.main.humidity,\r\n            sky: response.data.weather[0].description,\r\n            icon: response.data.weather[0].icon,\r\n            wind: response.data.wind.speed,\r\n            windDirection: response.data.wind.deg,\r\n        })\r\n        setDate({\r\n            timeShift: response.data.timezone\r\n        })\r\n        setError('')\r\n        console.log(response)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Header />\r\n            <SearchForm apiCall={apiCall} />\r\n            <Content\r\n                location={location}\r\n                weather={weather}\r\n                date={date}\r\n                error={error} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main","import React from 'react'\nimport Main from './components/Main'\n\nfunction App() {\n  return (\n    <>\n      <Main />\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}